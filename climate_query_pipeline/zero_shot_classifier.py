"""
zero_shot_classifier.py
=======================
Zero-shot category detector with optional keyword map.

* If keyword_map.py exists (generated by categorize_keywords.py)
  it will do a fast substring vote first.
* Otherwise, it falls back directly to the transformer NLI model.

Usage:
    from zero_shot_classifier import predict_category
"""
from functools import lru_cache
from pathlib import Path
from typing import Optional

from categories import CATEGORIES
from keyword_map import KEYWORDS


# --- optional keyword map -------------------------------------------
# KEYWORDS = None
if Path(__file__).with_name("keyword_map.py").exists():
    from keyword_map import KEYWORDS  # type: ignore

def _keyword_vote(q: str) -> Optional[str]:
    if KEYWORDS is None:
        return None
    q_lower = q.lower()
    for cat, kws in KEYWORDS.items():
        if any(k in q_lower for k in kws):
            return cat
    return None


# --- zeroâ€‘shot classifier -------------------------------------------
from transformers import pipeline


@lru_cache(maxsize=1)
def _nli():
    """Load the zero-shot classification pipeline, caching to perform inference faster."""
    return pipeline(
        "zero-shot-classification",
        model="facebook/bart-large-mnli",
        device_map="auto",          # GPU if available
    )


def _nli_guess(query: str) -> str:
    """Return best-guess category string using zero-shot classification."""
    res = _nli()(
        query,
        candidate_labels=CATEGORIES,
        hypothesis_template="This query is about {}."
    )
    return res["labels"][0]


def predict_category(query: str) -> str:
    """Return best-guess category string."""
    kw = _keyword_vote(query)
    return kw if kw else _nli_guess(query)
